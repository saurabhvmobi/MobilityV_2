#import <Foundation/Foundation.h>
#import <libxml/tree.h>
#import <objc/runtime.h>

#import "USAdditions.h"
#import "USGlobals.h"

@class ExchangeWebService_AddDelegateResponseMessageType;
@class ExchangeWebService_AddDelegateType;
@class ExchangeWebService_ApplyConversationActionResponseType;
@class ExchangeWebService_ApplyConversationActionType;
@class ExchangeWebService_ArrayOfDelegateUserResponseMessageType;
@class ExchangeWebService_ArrayOfFreeBusyResponse;
@class ExchangeWebService_ArrayOfMailTipsResponseMessageType;
@class ExchangeWebService_ArrayOfResponseMessagesType;
@class ExchangeWebService_ArrayOfServiceConfigurationResponseMessageType;
@class ExchangeWebService_ArrayOfServiceConfigurationType;
@class ExchangeWebService_AttachmentInfoResponseMessageType;
@class ExchangeWebService_BaseDelegateResponseMessageType;
@class ExchangeWebService_BaseDelegateType;
@class ExchangeWebService_BaseMoveCopyFolderType;
@class ExchangeWebService_BaseMoveCopyItemType;
@class ExchangeWebService_BaseRequestType;
@class ExchangeWebService_BaseResponseMessageType;
@class ExchangeWebService_ConvertIdResponseMessageType;
@class ExchangeWebService_ConvertIdResponseType;
@class ExchangeWebService_ConvertIdType;
@class ExchangeWebService_CopyFolderResponseType;
@class ExchangeWebService_CopyFolderType;
@class ExchangeWebService_CopyItemResponseType;
@class ExchangeWebService_CopyItemType;
@class ExchangeWebService_CreateAttachmentResponseType;
@class ExchangeWebService_CreateAttachmentType;
@class ExchangeWebService_CreateFolderResponseType;
@class ExchangeWebService_CreateFolderType;
@class ExchangeWebService_CreateItemResponseType;
@class ExchangeWebService_CreateItemType;
@class ExchangeWebService_CreateManagedFolderRequestType;
@class ExchangeWebService_CreateManagedFolderResponseType;
@class ExchangeWebService_CreateUserConfigurationResponseType;
@class ExchangeWebService_CreateUserConfigurationType;
@class ExchangeWebService_DelegateUserResponseMessageType;
@class ExchangeWebService_DeleteAttachmentResponseMessageType;
@class ExchangeWebService_DeleteAttachmentResponseType;
@class ExchangeWebService_DeleteAttachmentType;
@class ExchangeWebService_DeleteFolderResponseType;
@class ExchangeWebService_DeleteFolderType;
@class ExchangeWebService_DeleteItemResponseType;
@class ExchangeWebService_DeleteItemType;
@class ExchangeWebService_DeleteUserConfigurationResponseType;
@class ExchangeWebService_DeleteUserConfigurationType;
@class ExchangeWebService_DisconnectPhoneCallResponseMessageType;
@class ExchangeWebService_DisconnectPhoneCallType;
@class ExchangeWebService_EmptyFolderResponseType;
@class ExchangeWebService_EmptyFolderType;
@class ExchangeWebService_ExpandDLResponseMessageType;
@class ExchangeWebService_ExpandDLResponseType;
@class ExchangeWebService_ExpandDLType;
@class ExchangeWebService_ExportItemsResponseMessageType;
@class ExchangeWebService_ExportItemsResponseType;
@class ExchangeWebService_ExportItemsType;
@class ExchangeWebService_FindConversationResponseMessageType;
@class ExchangeWebService_FindConversationType;
@class ExchangeWebService_FindFolderResponseMessageType;
@class ExchangeWebService_FindFolderResponseType;
@class ExchangeWebService_FindFolderType;
@class ExchangeWebService_FindItemResponseMessageType;
@class ExchangeWebService_FindItemResponseType;
@class ExchangeWebService_FindItemType;
@class ExchangeWebService_FindMailboxStatisticsByKeywordsResponseMessageType;
@class ExchangeWebService_FindMailboxStatisticsByKeywordsResponseType;
@class ExchangeWebService_FindMailboxStatisticsByKeywordsType;
@class ExchangeWebService_FindMessageTrackingReportRequestType;
@class ExchangeWebService_FindMessageTrackingReportResponseMessageType;
@class ExchangeWebService_FolderInfoResponseMessageType;
@class ExchangeWebService_FreeBusyResponseType;
@class ExchangeWebService_GetAttachmentResponseType;
@class ExchangeWebService_GetAttachmentType;
@class ExchangeWebService_GetDelegateResponseMessageType;
@class ExchangeWebService_GetDelegateType;
@class ExchangeWebService_GetEventsResponseMessageType;
@class ExchangeWebService_GetEventsResponseType;
@class ExchangeWebService_GetEventsType;
@class ExchangeWebService_GetFolderResponseType;
@class ExchangeWebService_GetFolderType;
@class ExchangeWebService_GetInboxRulesRequestType;
@class ExchangeWebService_GetInboxRulesResponseType;
@class ExchangeWebService_GetItemResponseType;
@class ExchangeWebService_GetItemType;
@class ExchangeWebService_GetMailTipsResponseMessageType;
@class ExchangeWebService_GetMailTipsType;
@class ExchangeWebService_GetMessageTrackingReportRequestType;
@class ExchangeWebService_GetMessageTrackingReportResponseMessageType;
@class ExchangeWebService_GetPasswordExpirationDateResponseMessageType;
@class ExchangeWebService_GetPasswordExpirationDateType;
@class ExchangeWebService_GetPhoneCallInformationResponseMessageType;
@class ExchangeWebService_GetPhoneCallInformationType;
@class ExchangeWebService_GetRoomListsResponseMessageType;
@class ExchangeWebService_GetRoomListsType;
@class ExchangeWebService_GetRoomsResponseMessageType;
@class ExchangeWebService_GetRoomsType;
@class ExchangeWebService_GetServerTimeZonesResponseMessageType;
@class ExchangeWebService_GetServerTimeZonesResponseType;
@class ExchangeWebService_GetServerTimeZonesType;
@class ExchangeWebService_GetServiceConfigurationResponseMessageType;
@class ExchangeWebService_GetServiceConfigurationType;
@class ExchangeWebService_GetSharingFolderResponseMessageType;
@class ExchangeWebService_GetSharingFolderType;
@class ExchangeWebService_GetSharingMetadataResponseMessageType;
@class ExchangeWebService_GetSharingMetadataType;
@class ExchangeWebService_GetStreamingEventsResponseMessageType;
@class ExchangeWebService_GetStreamingEventsResponseType;
@class ExchangeWebService_GetStreamingEventsType;
@class ExchangeWebService_GetUserAvailabilityRequestType;
@class ExchangeWebService_GetUserAvailabilityResponseType;
@class ExchangeWebService_GetUserConfigurationResponseMessageType;
@class ExchangeWebService_GetUserConfigurationResponseType;
@class ExchangeWebService_GetUserConfigurationType;
@class ExchangeWebService_GetUserOofSettingsRequest;
@class ExchangeWebService_GetUserOofSettingsResponse;
@class ExchangeWebService_ItemInfoResponseMessageType;
@class ExchangeWebService_MailTipsResponseMessageType;
@class ExchangeWebService_MoveFolderResponseType;
@class ExchangeWebService_MoveFolderType;
@class ExchangeWebService_MoveItemResponseType;
@class ExchangeWebService_MoveItemType;
@class ExchangeWebService_PlayOnPhoneResponseMessageType;
@class ExchangeWebService_PlayOnPhoneType;
@class ExchangeWebService_RefreshSharingFolderResponseMessageType;
@class ExchangeWebService_RefreshSharingFolderType;
@class ExchangeWebService_RemoveDelegateResponseMessageType;
@class ExchangeWebService_RemoveDelegateType;
@class ExchangeWebService_ResolveNamesResponseMessageType;
@class ExchangeWebService_ResolveNamesResponseType;
@class ExchangeWebService_ResolveNamesType;
@class ExchangeWebService_ResponseCodeType;
@class ExchangeWebService_ResponseMessageType;
@class ExchangeWebService_SendItemResponseType;
@class ExchangeWebService_SendItemType;
@class ExchangeWebService_SendNotificationResponseMessageType;
@class ExchangeWebService_SendNotificationResponseType;
@class ExchangeWebService_SendNotificationResultType;
@class ExchangeWebService_SequenceElement_MessageXml;
@class ExchangeWebService_ServiceConfigurationResponseMessageType;
@class ExchangeWebService_SetUserOofSettingsRequest;
@class ExchangeWebService_SetUserOofSettingsResponse;
@class ExchangeWebService_SubscribeResponseMessageType;
@class ExchangeWebService_SubscribeResponseType;
@class ExchangeWebService_SubscribeType;
@class ExchangeWebService_SuggestionsResponseType;
@class ExchangeWebService_SyncFolderHierarchyResponseMessageType;
@class ExchangeWebService_SyncFolderHierarchyResponseType;
@class ExchangeWebService_SyncFolderHierarchyType;
@class ExchangeWebService_SyncFolderItemsResponseMessageType;
@class ExchangeWebService_SyncFolderItemsResponseType;
@class ExchangeWebService_SyncFolderItemsType;
@class ExchangeWebService_UnsubscribeResponseType;
@class ExchangeWebService_UnsubscribeType;
@class ExchangeWebService_UpdateDelegateResponseMessageType;
@class ExchangeWebService_UpdateDelegateType;
@class ExchangeWebService_UpdateFolderResponseType;
@class ExchangeWebService_UpdateFolderType;
@class ExchangeWebService_UpdateInboxRulesRequestType;
@class ExchangeWebService_UpdateInboxRulesResponseType;
@class ExchangeWebService_UpdateItemResponseMessageType;
@class ExchangeWebService_UpdateItemResponseType;
@class ExchangeWebService_UpdateItemType;
@class ExchangeWebService_UpdateUserConfigurationResponseType;
@class ExchangeWebService_UpdateUserConfigurationType;
@class ExchangeWebService_UploadItemsResponseMessageType;
@class ExchangeWebService_UploadItemsResponseType;
@class ExchangeWebService_UploadItemsType;

#import "t.h"
#import "ExchangeWebService.h"
@interface ExchangeWebService_ArrayOfResponseMessagesType : NSObject
+ (NSArray *)deserializeNode:(xmlNodePtr)cur;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(NSArray *)value;
@end
@interface ExchangeWebService_BaseResponseMessageType : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_BaseResponseMessageType *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic, strong) NSArray * ResponseMessages;
@end
@interface ExchangeWebService_GetStreamingEventsResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_SendItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_BaseRequestType : NSObject
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_BaseRequestType *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

@end
@interface ExchangeWebService_SubscribeType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_PullSubscriptionRequestType * PullSubscriptionRequest;
@property (nonatomic, strong) t_PushSubscriptionRequestType * PushSubscriptionRequest;
@property (nonatomic, strong) t_StreamingSubscriptionRequestType * StreamingSubscriptionRequest;
@end
typedef enum ExchangeWebService_ResponseCodeTypeEnum {
	ExchangeWebService_ResponseCodeType_none = 0,
	ExchangeWebService_ResponseCodeType_ErrorADOperation,
	ExchangeWebService_ResponseCodeType_ErrorADSessionFilter,
	ExchangeWebService_ResponseCodeType_ErrorADUnavailable,
	ExchangeWebService_ResponseCodeType_ErrorAccessDenied,
	ExchangeWebService_ResponseCodeType_ErrorAccessModeSpecified,
	ExchangeWebService_ResponseCodeType_ErrorAccountDisabled,
	ExchangeWebService_ResponseCodeType_ErrorAddDelegatesFailed,
	ExchangeWebService_ResponseCodeType_ErrorAddressSpaceNotFound,
	ExchangeWebService_ResponseCodeType_ErrorAffectedTaskOccurrencesRequired,
	ExchangeWebService_ResponseCodeType_ErrorApplyConversationActionFailed,
	ExchangeWebService_ResponseCodeType_ErrorAttachmentNestLevelLimitExceeded,
	ExchangeWebService_ResponseCodeType_ErrorAttachmentSizeLimitExceeded,
	ExchangeWebService_ResponseCodeType_ErrorAutoDiscoverFailed,
	ExchangeWebService_ResponseCodeType_ErrorAvailabilityConfigNotFound,
	ExchangeWebService_ResponseCodeType_ErrorBatchProcessingStopped,
	ExchangeWebService_ResponseCodeType_ErrorCalendarCannotMoveOrCopyOccurrence,
	ExchangeWebService_ResponseCodeType_ErrorCalendarCannotUpdateDeletedItem,
	ExchangeWebService_ResponseCodeType_ErrorCalendarCannotUseIdForOccurrenceId,
	ExchangeWebService_ResponseCodeType_ErrorCalendarCannotUseIdForRecurringMasterId,
	ExchangeWebService_ResponseCodeType_ErrorCalendarDurationIsTooLong,
	ExchangeWebService_ResponseCodeType_ErrorCalendarEndDateIsEarlierThanStartDate,
	ExchangeWebService_ResponseCodeType_ErrorCalendarFolderIsInvalidForCalendarView,
	ExchangeWebService_ResponseCodeType_ErrorCalendarInvalidAttributeValue,
	ExchangeWebService_ResponseCodeType_ErrorCalendarInvalidDayForTimeChangePattern,
	ExchangeWebService_ResponseCodeType_ErrorCalendarInvalidDayForWeeklyRecurrence,
	ExchangeWebService_ResponseCodeType_ErrorCalendarInvalidPropertyState,
	ExchangeWebService_ResponseCodeType_ErrorCalendarInvalidPropertyValue,
	ExchangeWebService_ResponseCodeType_ErrorCalendarInvalidRecurrence,
	ExchangeWebService_ResponseCodeType_ErrorCalendarInvalidTimeZone,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsCancelledForAccept,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsCancelledForDecline,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsCancelledForRemove,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsCancelledForTentative,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsDelegatedForAccept,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsDelegatedForDecline,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsDelegatedForRemove,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsDelegatedForTentative,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsNotOrganizer,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsOrganizerForAccept,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsOrganizerForDecline,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsOrganizerForRemove,
	ExchangeWebService_ResponseCodeType_ErrorCalendarIsOrganizerForTentative,
	ExchangeWebService_ResponseCodeType_ErrorCalendarMeetingRequestIsOutOfDate,
	ExchangeWebService_ResponseCodeType_ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange,
	ExchangeWebService_ResponseCodeType_ErrorCalendarOccurrenceIsDeletedFromRecurrence,
	ExchangeWebService_ResponseCodeType_ErrorCalendarOutOfRange,
	ExchangeWebService_ResponseCodeType_ErrorCalendarViewRangeTooBig,
	ExchangeWebService_ResponseCodeType_ErrorCallerIsInvalidADAccount,
	ExchangeWebService_ResponseCodeType_ErrorCannotCreateCalendarItemInNonCalendarFolder,
	ExchangeWebService_ResponseCodeType_ErrorCannotCreateContactInNonContactFolder,
	ExchangeWebService_ResponseCodeType_ErrorCannotCreatePostItemInNonMailFolder,
	ExchangeWebService_ResponseCodeType_ErrorCannotCreateTaskInNonTaskFolder,
	ExchangeWebService_ResponseCodeType_ErrorCannotDeleteObject,
	ExchangeWebService_ResponseCodeType_ErrorCannotDeleteTaskOccurrence,
	ExchangeWebService_ResponseCodeType_ErrorCannotEmptyFolder,
	ExchangeWebService_ResponseCodeType_ErrorCannotOpenFileAttachment,
	ExchangeWebService_ResponseCodeType_ErrorCannotSetCalendarPermissionOnNonCalendarFolder,
	ExchangeWebService_ResponseCodeType_ErrorCannotSetNonCalendarPermissionOnCalendarFolder,
	ExchangeWebService_ResponseCodeType_ErrorCannotSetPermissionUnknownEntries,
	ExchangeWebService_ResponseCodeType_ErrorCannotUseFolderIdForItemId,
	ExchangeWebService_ResponseCodeType_ErrorCannotUseItemIdForFolderId,
	ExchangeWebService_ResponseCodeType_ErrorChangeKeyRequired,
	ExchangeWebService_ResponseCodeType_ErrorChangeKeyRequiredForWriteOperations,
	ExchangeWebService_ResponseCodeType_ErrorClientDisconnected,
	ExchangeWebService_ResponseCodeType_ErrorConnectionFailed,
	ExchangeWebService_ResponseCodeType_ErrorContainsFilterWrongType,
	ExchangeWebService_ResponseCodeType_ErrorContentConversionFailed,
	ExchangeWebService_ResponseCodeType_ErrorCorruptData,
	ExchangeWebService_ResponseCodeType_ErrorCreateItemAccessDenied,
	ExchangeWebService_ResponseCodeType_ErrorCreateManagedFolderPartialCompletion,
	ExchangeWebService_ResponseCodeType_ErrorCreateSubfolderAccessDenied,
	ExchangeWebService_ResponseCodeType_ErrorCrossMailboxMoveCopy,
	ExchangeWebService_ResponseCodeType_ErrorCrossSiteRequest,
	ExchangeWebService_ResponseCodeType_ErrorDataSizeLimitExceeded,
	ExchangeWebService_ResponseCodeType_ErrorDataSourceOperation,
	ExchangeWebService_ResponseCodeType_ErrorDelegateAlreadyExists,
	ExchangeWebService_ResponseCodeType_ErrorDelegateCannotAddOwner,
	ExchangeWebService_ResponseCodeType_ErrorDelegateMissingConfiguration,
	ExchangeWebService_ResponseCodeType_ErrorDelegateNoUser,
	ExchangeWebService_ResponseCodeType_ErrorDelegateValidationFailed,
	ExchangeWebService_ResponseCodeType_ErrorDeleteDistinguishedFolder,
	ExchangeWebService_ResponseCodeType_ErrorDeleteItemsFailed,
	ExchangeWebService_ResponseCodeType_ErrorDistinguishedUserNotSupported,
	ExchangeWebService_ResponseCodeType_ErrorDistributionListMemberNotExist,
	ExchangeWebService_ResponseCodeType_ErrorDuplicateInputFolderNames,
	ExchangeWebService_ResponseCodeType_ErrorDuplicateSOAPHeader,
	ExchangeWebService_ResponseCodeType_ErrorDuplicateUserIdsSpecified,
	ExchangeWebService_ResponseCodeType_ErrorEmailAddressMismatch,
	ExchangeWebService_ResponseCodeType_ErrorEventNotFound,
	ExchangeWebService_ResponseCodeType_ErrorExceededConnectionCount,
	ExchangeWebService_ResponseCodeType_ErrorExceededFindCountLimit,
	ExchangeWebService_ResponseCodeType_ErrorExceededSubscriptionCount,
	ExchangeWebService_ResponseCodeType_ErrorExpiredSubscription,
	ExchangeWebService_ResponseCodeType_ErrorFolderCorrupt,
	ExchangeWebService_ResponseCodeType_ErrorFolderExists,
	ExchangeWebService_ResponseCodeType_ErrorFolderNotFound,
	ExchangeWebService_ResponseCodeType_ErrorFolderPropertRequestFailed,
	ExchangeWebService_ResponseCodeType_ErrorFolderSave,
	ExchangeWebService_ResponseCodeType_ErrorFolderSaveFailed,
	ExchangeWebService_ResponseCodeType_ErrorFolderSavePropertyError,
	ExchangeWebService_ResponseCodeType_ErrorFreeBusyDLLimitReached,
	ExchangeWebService_ResponseCodeType_ErrorFreeBusyGenerationFailed,
	ExchangeWebService_ResponseCodeType_ErrorGetServerSecurityDescriptorFailed,
	ExchangeWebService_ResponseCodeType_ErrorIPGatewayNotFound,
	ExchangeWebService_ResponseCodeType_ErrorImpersonateUserDenied,
	ExchangeWebService_ResponseCodeType_ErrorImpersonationDenied,
	ExchangeWebService_ResponseCodeType_ErrorImpersonationFailed,
	ExchangeWebService_ResponseCodeType_ErrorInboxRulesValidationError,
	ExchangeWebService_ResponseCodeType_ErrorIncorrectSchemaVersion,
	ExchangeWebService_ResponseCodeType_ErrorIncorrectUpdatePropertyCount,
	ExchangeWebService_ResponseCodeType_ErrorIndividualMailboxLimitReached,
	ExchangeWebService_ResponseCodeType_ErrorInsufficientResources,
	ExchangeWebService_ResponseCodeType_ErrorInternalServerError,
	ExchangeWebService_ResponseCodeType_ErrorInternalServerTransientError,
	ExchangeWebService_ResponseCodeType_ErrorInvalidAccessLevel,
	ExchangeWebService_ResponseCodeType_ErrorInvalidArgument,
	ExchangeWebService_ResponseCodeType_ErrorInvalidAttachmentId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidAttachmentSubfilter,
	ExchangeWebService_ResponseCodeType_ErrorInvalidAttachmentSubfilterTextFilter,
	ExchangeWebService_ResponseCodeType_ErrorInvalidAuthorizationContext,
	ExchangeWebService_ResponseCodeType_ErrorInvalidChangeKey,
	ExchangeWebService_ResponseCodeType_ErrorInvalidClientSecurityContext,
	ExchangeWebService_ResponseCodeType_ErrorInvalidCompleteDate,
	ExchangeWebService_ResponseCodeType_ErrorInvalidContactEmailAddress,
	ExchangeWebService_ResponseCodeType_ErrorInvalidContactEmailIndex,
	ExchangeWebService_ResponseCodeType_ErrorInvalidCrossForestCredentials,
	ExchangeWebService_ResponseCodeType_ErrorInvalidDelegatePermission,
	ExchangeWebService_ResponseCodeType_ErrorInvalidDelegateUserId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidExchangeImpersonationHeaderData,
	ExchangeWebService_ResponseCodeType_ErrorInvalidExcludesRestriction,
	ExchangeWebService_ResponseCodeType_ErrorInvalidExpressionTypeForSubFilter,
	ExchangeWebService_ResponseCodeType_ErrorInvalidExtendedProperty,
	ExchangeWebService_ResponseCodeType_ErrorInvalidExtendedPropertyValue,
	ExchangeWebService_ResponseCodeType_ErrorInvalidExternalSharingInitiator,
	ExchangeWebService_ResponseCodeType_ErrorInvalidExternalSharingSubscriber,
	ExchangeWebService_ResponseCodeType_ErrorInvalidFederatedOrganizationId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidFolderId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidFolderTypeForOperation,
	ExchangeWebService_ResponseCodeType_ErrorInvalidFractionalPagingParameters,
	ExchangeWebService_ResponseCodeType_ErrorInvalidFreeBusyViewType,
	ExchangeWebService_ResponseCodeType_ErrorInvalidGetSharingFolderRequest,
	ExchangeWebService_ResponseCodeType_ErrorInvalidId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdEmpty,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdMalformed,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdMalformedEwsLegacyIdFormat,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdMonikerTooLong,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdNotAnItemAttachmentId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdReturnedByResolveNames,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdStoreObjectIdTooLong,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdTooManyAttachmentLevels,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIdXml,
	ExchangeWebService_ResponseCodeType_ErrorInvalidIndexedPagingParameters,
	ExchangeWebService_ResponseCodeType_ErrorInvalidInternetHeaderChildNodes,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationAcceptItem,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationCancelItem,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationCreateItem,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationCreateItemAttachment,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationDeclineItem,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationExpandDL,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationRemoveItem,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationSendItem,
	ExchangeWebService_ResponseCodeType_ErrorInvalidItemForOperationTentative,
	ExchangeWebService_ResponseCodeType_ErrorInvalidLogonType,
	ExchangeWebService_ResponseCodeType_ErrorInvalidMailbox,
	ExchangeWebService_ResponseCodeType_ErrorInvalidManagedFolderProperty,
	ExchangeWebService_ResponseCodeType_ErrorInvalidManagedFolderQuota,
	ExchangeWebService_ResponseCodeType_ErrorInvalidManagedFolderSize,
	ExchangeWebService_ResponseCodeType_ErrorInvalidMergedFreeBusyInterval,
	ExchangeWebService_ResponseCodeType_ErrorInvalidNameForNameResolution,
	ExchangeWebService_ResponseCodeType_ErrorInvalidNetworkServiceContext,
	ExchangeWebService_ResponseCodeType_ErrorInvalidOofParameter,
	ExchangeWebService_ResponseCodeType_ErrorInvalidOperation,
	ExchangeWebService_ResponseCodeType_ErrorInvalidOrganizationRelationshipForFreeBusy,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPagingMaxRows,
	ExchangeWebService_ResponseCodeType_ErrorInvalidParentFolder,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPercentCompleteValue,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPermissionSettings,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPhoneCallId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPhoneNumber,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPropertyAppend,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPropertyDelete,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPropertyForExists,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPropertyForOperation,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPropertyRequest,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPropertySet,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPropertyUpdateSentMessage,
	ExchangeWebService_ResponseCodeType_ErrorInvalidProxySecurityContext,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPullSubscriptionId,
	ExchangeWebService_ResponseCodeType_ErrorInvalidPushSubscriptionUrl,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRecipientSubfilter,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRecipientSubfilterComparison,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRecipientSubfilterOrder,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRecipientSubfilterTextFilter,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRecipients,
	ExchangeWebService_ResponseCodeType_ErrorInvalidReferenceItem,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRequest,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRestriction,
	ExchangeWebService_ResponseCodeType_ErrorInvalidRoutingType,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSIPUri,
	ExchangeWebService_ResponseCodeType_ErrorInvalidScheduledOofDuration,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSchemaVersionForMailboxVersion,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSecurityDescriptor,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSendItemSaveSettings,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSerializedAccessToken,
	ExchangeWebService_ResponseCodeType_ErrorInvalidServerVersion,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSharingData,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSharingMessage,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSid,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSmtpAddress,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSubfilterType,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSubfilterTypeNotAttendeeType,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSubfilterTypeNotRecipientType,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSubscription,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSubscriptionRequest,
	ExchangeWebService_ResponseCodeType_ErrorInvalidSyncStateData,
	ExchangeWebService_ResponseCodeType_ErrorInvalidTimeInterval,
	ExchangeWebService_ResponseCodeType_ErrorInvalidUserInfo,
	ExchangeWebService_ResponseCodeType_ErrorInvalidUserOofSettings,
	ExchangeWebService_ResponseCodeType_ErrorInvalidUserPrincipalName,
	ExchangeWebService_ResponseCodeType_ErrorInvalidUserSid,
	ExchangeWebService_ResponseCodeType_ErrorInvalidUserSidMissingUPN,
	ExchangeWebService_ResponseCodeType_ErrorInvalidValueForProperty,
	ExchangeWebService_ResponseCodeType_ErrorInvalidWatermark,
	ExchangeWebService_ResponseCodeType_ErrorIrresolvableConflict,
	ExchangeWebService_ResponseCodeType_ErrorItemCorrupt,
	ExchangeWebService_ResponseCodeType_ErrorItemNotFound,
	ExchangeWebService_ResponseCodeType_ErrorItemPropertyRequestFailed,
	ExchangeWebService_ResponseCodeType_ErrorItemSave,
	ExchangeWebService_ResponseCodeType_ErrorItemSavePropertyError,
	ExchangeWebService_ResponseCodeType_ErrorLegacyMailboxFreeBusyViewTypeNotMerged,
	ExchangeWebService_ResponseCodeType_ErrorLocalServerObjectNotFound,
	ExchangeWebService_ResponseCodeType_ErrorLogonAsNetworkServiceFailed,
	ExchangeWebService_ResponseCodeType_ErrorMailRecipientNotFound,
	ExchangeWebService_ResponseCodeType_ErrorMailTipsDisabled,
	ExchangeWebService_ResponseCodeType_ErrorMailboxConfiguration,
	ExchangeWebService_ResponseCodeType_ErrorMailboxDataArrayEmpty,
	ExchangeWebService_ResponseCodeType_ErrorMailboxDataArrayTooBig,
	ExchangeWebService_ResponseCodeType_ErrorMailboxFailover,
	ExchangeWebService_ResponseCodeType_ErrorMailboxLogonFailed,
	ExchangeWebService_ResponseCodeType_ErrorMailboxMoveInProgress,
	ExchangeWebService_ResponseCodeType_ErrorMailboxStoreUnavailable,
	ExchangeWebService_ResponseCodeType_ErrorManagedFolderAlreadyExists,
	ExchangeWebService_ResponseCodeType_ErrorManagedFolderNotFound,
	ExchangeWebService_ResponseCodeType_ErrorManagedFoldersRootFailure,
	ExchangeWebService_ResponseCodeType_ErrorMeetingSuggestionGenerationFailed,
	ExchangeWebService_ResponseCodeType_ErrorMessageDispositionRequired,
	ExchangeWebService_ResponseCodeType_ErrorMessageSizeExceeded,
	ExchangeWebService_ResponseCodeType_ErrorMessageTrackingNoSuchDomain,
	ExchangeWebService_ResponseCodeType_ErrorMessageTrackingPermanentError,
	ExchangeWebService_ResponseCodeType_ErrorMessageTrackingTransientError,
	ExchangeWebService_ResponseCodeType_ErrorMimeContentConversionFailed,
	ExchangeWebService_ResponseCodeType_ErrorMimeContentInvalid,
	ExchangeWebService_ResponseCodeType_ErrorMimeContentInvalidBase64String,
	ExchangeWebService_ResponseCodeType_ErrorMissedNotificationEvents,
	ExchangeWebService_ResponseCodeType_ErrorMissingArgument,
	ExchangeWebService_ResponseCodeType_ErrorMissingEmailAddress,
	ExchangeWebService_ResponseCodeType_ErrorMissingEmailAddressForManagedFolder,
	ExchangeWebService_ResponseCodeType_ErrorMissingInformationEmailAddress,
	ExchangeWebService_ResponseCodeType_ErrorMissingInformationReferenceItemId,
	ExchangeWebService_ResponseCodeType_ErrorMissingInformationSharingFolderId,
	ExchangeWebService_ResponseCodeType_ErrorMissingItemForCreateItemAttachment,
	ExchangeWebService_ResponseCodeType_ErrorMissingManagedFolderId,
	ExchangeWebService_ResponseCodeType_ErrorMissingRecipients,
	ExchangeWebService_ResponseCodeType_ErrorMissingUserIdInformation,
	ExchangeWebService_ResponseCodeType_ErrorMoreThanOneAccessModeSpecified,
	ExchangeWebService_ResponseCodeType_ErrorMoveCopyFailed,
	ExchangeWebService_ResponseCodeType_ErrorMoveDistinguishedFolder,
	ExchangeWebService_ResponseCodeType_ErrorNameResolutionMultipleResults,
	ExchangeWebService_ResponseCodeType_ErrorNameResolutionNoMailbox,
	ExchangeWebService_ResponseCodeType_ErrorNameResolutionNoResults,
	ExchangeWebService_ResponseCodeType_ErrorNewEventStreamConnectionOpened,
	ExchangeWebService_ResponseCodeType_ErrorNoApplicableProxyCASServersAvailable,
	ExchangeWebService_ResponseCodeType_ErrorNoCalendar,
	ExchangeWebService_ResponseCodeType_ErrorNoDestinationCASDueToKerberosRequirements,
	ExchangeWebService_ResponseCodeType_ErrorNoDestinationCASDueToSSLRequirements,
	ExchangeWebService_ResponseCodeType_ErrorNoDestinationCASDueToVersionMismatch,
	ExchangeWebService_ResponseCodeType_ErrorNoFolderClassOverride,
	ExchangeWebService_ResponseCodeType_ErrorNoFreeBusyAccess,
	ExchangeWebService_ResponseCodeType_ErrorNoPropertyTagForCustomProperties,
	ExchangeWebService_ResponseCodeType_ErrorNoPublicFolderReplicaAvailable,
	ExchangeWebService_ResponseCodeType_ErrorNoPublicFolderServerAvailable,
	ExchangeWebService_ResponseCodeType_ErrorNoRespondingCASInDestinationSite,
	ExchangeWebService_ResponseCodeType_ErrorNonExistentMailbox,
	ExchangeWebService_ResponseCodeType_ErrorNonPrimarySmtpAddress,
	ExchangeWebService_ResponseCodeType_ErrorNotAllowedExternalSharingByPolicy,
	ExchangeWebService_ResponseCodeType_ErrorNotDelegate,
	ExchangeWebService_ResponseCodeType_ErrorNotEnoughMemory,
	ExchangeWebService_ResponseCodeType_ErrorNotSupportedSharingMessage,
	ExchangeWebService_ResponseCodeType_ErrorObjectTypeChanged,
	ExchangeWebService_ResponseCodeType_ErrorOccurrenceCrossingBoundary,
	ExchangeWebService_ResponseCodeType_ErrorOccurrenceTimeSpanTooBig,
	ExchangeWebService_ResponseCodeType_ErrorOperationNotAllowedWithPublicFolderRoot,
	ExchangeWebService_ResponseCodeType_ErrorOrganizationNotFederated,
	ExchangeWebService_ResponseCodeType_ErrorOutlookRuleBlobExists,
	ExchangeWebService_ResponseCodeType_ErrorParentFolderIdRequired,
	ExchangeWebService_ResponseCodeType_ErrorParentFolderNotFound,
	ExchangeWebService_ResponseCodeType_ErrorPasswordChangeRequired,
	ExchangeWebService_ResponseCodeType_ErrorPasswordExpired,
	ExchangeWebService_ResponseCodeType_ErrorPermissionNotAllowedByPolicy,
	ExchangeWebService_ResponseCodeType_ErrorPhoneNumberNotDialable,
	ExchangeWebService_ResponseCodeType_ErrorPropertyUpdate,
	ExchangeWebService_ResponseCodeType_ErrorPropertyValidationFailure,
	ExchangeWebService_ResponseCodeType_ErrorProxiedSubscriptionCallFailure,
	ExchangeWebService_ResponseCodeType_ErrorProxyCallFailed,
	ExchangeWebService_ResponseCodeType_ErrorProxyGroupSidLimitExceeded,
	ExchangeWebService_ResponseCodeType_ErrorProxyRequestNotAllowed,
	ExchangeWebService_ResponseCodeType_ErrorProxyRequestProcessingFailed,
	ExchangeWebService_ResponseCodeType_ErrorProxyServiceDiscoveryFailed,
	ExchangeWebService_ResponseCodeType_ErrorProxyTokenExpired,
	ExchangeWebService_ResponseCodeType_ErrorPublicFolderRequestProcessingFailed,
	ExchangeWebService_ResponseCodeType_ErrorPublicFolderServerNotFound,
	ExchangeWebService_ResponseCodeType_ErrorQueryFilterTooLong,
	ExchangeWebService_ResponseCodeType_ErrorQuotaExceeded,
	ExchangeWebService_ResponseCodeType_ErrorReadEventsFailed,
	ExchangeWebService_ResponseCodeType_ErrorReadReceiptNotPending,
	ExchangeWebService_ResponseCodeType_ErrorRecurrenceEndDateTooBig,
	ExchangeWebService_ResponseCodeType_ErrorRecurrenceHasNoOccurrence,
	ExchangeWebService_ResponseCodeType_ErrorRemoveDelegatesFailed,
	ExchangeWebService_ResponseCodeType_ErrorRequestAborted,
	ExchangeWebService_ResponseCodeType_ErrorRequestStreamTooBig,
	ExchangeWebService_ResponseCodeType_ErrorRequiredPropertyMissing,
	ExchangeWebService_ResponseCodeType_ErrorResolveNamesInvalidFolderType,
	ExchangeWebService_ResponseCodeType_ErrorResolveNamesOnlyOneContactsFolderAllowed,
	ExchangeWebService_ResponseCodeType_ErrorResponseSchemaValidation,
	ExchangeWebService_ResponseCodeType_ErrorRestrictionTooComplex,
	ExchangeWebService_ResponseCodeType_ErrorRestrictionTooLong,
	ExchangeWebService_ResponseCodeType_ErrorResultSetTooBig,
	ExchangeWebService_ResponseCodeType_ErrorRulesOverQuota,
	ExchangeWebService_ResponseCodeType_ErrorSavedItemFolderNotFound,
	ExchangeWebService_ResponseCodeType_ErrorSchemaValidation,
	ExchangeWebService_ResponseCodeType_ErrorSearchFolderNotInitialized,
	ExchangeWebService_ResponseCodeType_ErrorSendAsDenied,
	ExchangeWebService_ResponseCodeType_ErrorSendMeetingCancellationsRequired,
	ExchangeWebService_ResponseCodeType_ErrorSendMeetingInvitationsOrCancellationsRequired,
	ExchangeWebService_ResponseCodeType_ErrorSendMeetingInvitationsRequired,
	ExchangeWebService_ResponseCodeType_ErrorSentMeetingRequestUpdate,
	ExchangeWebService_ResponseCodeType_ErrorSentTaskRequestUpdate,
	ExchangeWebService_ResponseCodeType_ErrorServerBusy,
	ExchangeWebService_ResponseCodeType_ErrorServiceDiscoveryFailed,
	ExchangeWebService_ResponseCodeType_ErrorSharingNoExternalEwsAvailable,
	ExchangeWebService_ResponseCodeType_ErrorSharingSynchronizationFailed,
	ExchangeWebService_ResponseCodeType_ErrorStaleObject,
	ExchangeWebService_ResponseCodeType_ErrorSubmissionQuotaExceeded,
	ExchangeWebService_ResponseCodeType_ErrorSubscriptionAccessDenied,
	ExchangeWebService_ResponseCodeType_ErrorSubscriptionDelegateAccessNotSupported,
	ExchangeWebService_ResponseCodeType_ErrorSubscriptionNotFound,
	ExchangeWebService_ResponseCodeType_ErrorSubscriptionUnsubscribed,
	ExchangeWebService_ResponseCodeType_ErrorSyncFolderNotFound,
	ExchangeWebService_ResponseCodeType_ErrorTimeIntervalTooBig,
	ExchangeWebService_ResponseCodeType_ErrorTimeZone,
	ExchangeWebService_ResponseCodeType_ErrorTimeoutExpired,
	ExchangeWebService_ResponseCodeType_ErrorToFolderNotFound,
	ExchangeWebService_ResponseCodeType_ErrorTokenSerializationDenied,
	ExchangeWebService_ResponseCodeType_ErrorUnableToGetUserOofSettings,
	ExchangeWebService_ResponseCodeType_ErrorUnifiedMessagingDialPlanNotFound,
	ExchangeWebService_ResponseCodeType_ErrorUnifiedMessagingRequestFailed,
	ExchangeWebService_ResponseCodeType_ErrorUnifiedMessagingServerNotFound,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedCulture,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedMapiPropertyType,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedMimeConversion,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedPathForQuery,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedPathForSortGroup,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedPropertyDefinition,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedQueryFilter,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedRecurrence,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedSubFilter,
	ExchangeWebService_ResponseCodeType_ErrorUnsupportedTypeForConversion,
	ExchangeWebService_ResponseCodeType_ErrorUpdateDelegatesFailed,
	ExchangeWebService_ResponseCodeType_ErrorUpdatePropertyMismatch,
	ExchangeWebService_ResponseCodeType_ErrorUserNotAllowedByPolicy,
	ExchangeWebService_ResponseCodeType_ErrorUserNotUnifiedMessagingEnabled,
	ExchangeWebService_ResponseCodeType_ErrorUserWithoutFederatedProxyAddress,
	ExchangeWebService_ResponseCodeType_ErrorValueOutOfRange,
	ExchangeWebService_ResponseCodeType_ErrorVirusDetected,
	ExchangeWebService_ResponseCodeType_ErrorVirusMessageDeleted,
	ExchangeWebService_ResponseCodeType_ErrorVoiceMailNotImplemented,
	ExchangeWebService_ResponseCodeType_ErrorWebRequestInInvalidState,
	ExchangeWebService_ResponseCodeType_ErrorWin32InteropError,
	ExchangeWebService_ResponseCodeType_ErrorWorkingHoursSaveFailed,
	ExchangeWebService_ResponseCodeType_ErrorWorkingHoursXmlMalformed,
	ExchangeWebService_ResponseCodeType_ErrorWrongServerVersion,
	ExchangeWebService_ResponseCodeType_ErrorWrongServerVersionDelegate,
	ExchangeWebService_ResponseCodeType_NoError,
} ExchangeWebService_ResponseCodeTypeEnum;

@interface ExchangeWebService_ResponseCodeType : NSObject
+ (ExchangeWebService_ResponseCodeTypeEnum)valueFromString:(NSString *)string;
+ (NSString *)stringFromValue:(ExchangeWebService_ResponseCodeTypeEnum)value;

+ (NSNumber *)deserializeNode:(xmlNodePtr)node;
+ (ExchangeWebService_ResponseCodeTypeEnum)deserializeNodeRaw:(xmlNodePtr)node;
+ (ExchangeWebService_ResponseCodeTypeEnum)deserializeAttribute:(const char *)attrName ofNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_ResponseCodeTypeEnum)value;
+ (void)serializeToProperty:(const char *)property onNode:(xmlNodePtr)node
                      value:(ExchangeWebService_ResponseCodeTypeEnum)value;
@end
@interface ExchangeWebService_ResponseMessageType : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_ResponseMessageType *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic, strong) NSString * MessageText;
@property (nonatomic) ExchangeWebService_ResponseCodeTypeEnum ResponseCode;
@property (nonatomic, strong) NSNumber * DescriptiveLinkKey;
@property (nonatomic, strong) ExchangeWebService_SequenceElement_MessageXml * MessageXml;

/* attributes */
@property (nonatomic) t_ResponseClassTypeEnum ResponseClass;
@end
@interface ExchangeWebService_FindItemResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_FindItemParentType * RootFolder;
@end
@interface ExchangeWebService_ItemInfoResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * Items;
@end
@interface ExchangeWebService_ExportItemsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_ItemIdType * ItemId;
@property (nonatomic, strong) NSData * Data;
@end
@interface ExchangeWebService_GetRoomListsType : ExchangeWebService_BaseRequestType
@end
@interface ExchangeWebService_ConvertIdResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_FindFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_FolderResponseShapeType * FolderShape;
@property (nonatomic, strong) t_IndexedPageViewType * IndexedPageFolderView;
@property (nonatomic, strong) t_FractionalPageViewType * FractionalPageFolderView;
@property (nonatomic, strong) t_RestrictionType * Restriction;
@property (nonatomic, strong) NSArray * ParentFolderIds;

/* attributes */
@property (nonatomic) t_FolderQueryTraversalTypeEnum Traversal;
@end
@interface ExchangeWebService_CopyItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetSharingFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * SmtpAddress;
@property (nonatomic) t_SharingDataTypeEnum DataType;
@property (nonatomic, strong) NSString * SharedFolderId;
@end
@interface ExchangeWebService_ServiceConfigurationResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_MailTipsServiceConfiguration * MailTipsConfiguration;
@property (nonatomic, strong) t_UnifiedMessageServiceConfiguration * UnifiedMessagingConfiguration;
@property (nonatomic, strong) t_ProtectionRulesServiceConfiguration * ProtectionRulesConfiguration;
@end
@interface ExchangeWebService_UnsubscribeType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * SubscriptionId;
@end
@interface ExchangeWebService_ArrayOfMailTipsResponseMessageType : NSObject
+ (NSArray *)deserializeNode:(xmlNodePtr)cur;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(NSArray *)value;
@end
@interface ExchangeWebService_GetMailTipsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * ResponseMessages;
@end
@interface ExchangeWebService_DeleteItemType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * ItemIds;

/* attributes */
@property (nonatomic) t_DisposalTypeEnum DeleteType;
@property (nonatomic) t_CalendarItemCreateOrDeleteOperationTypeEnum SendMeetingCancellations;
@property (nonatomic) t_AffectedTaskOccurrencesTypeEnum AffectedTaskOccurrences;
@end
@interface ExchangeWebService_ApplyConversationActionType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * ConversationActions;
@end
@interface ExchangeWebService_DisconnectPhoneCallResponseMessageType : ExchangeWebService_ResponseMessageType
@end
@interface ExchangeWebService_DeleteFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * FolderIds;

/* attributes */
@property (nonatomic) t_DisposalTypeEnum DeleteType;
@end
@interface ExchangeWebService_ExportItemsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * ItemIds;
@end
@interface ExchangeWebService_GetUserConfigurationResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetServerTimeZonesType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * Ids;

/* attributes */
@property (nonatomic, strong) NSNumber * ReturnFullTimeZoneData;
@end
@interface ExchangeWebService_UpdateItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_BaseDelegateType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_EmailAddressType * Mailbox;
@end
@interface ExchangeWebService_AddDelegateType : ExchangeWebService_BaseDelegateType
/* elements */
@property (nonatomic, strong) NSArray * DelegateUsers;
@property (nonatomic) t_DeliverMeetingRequestsTypeEnum DeliverMeetingRequests;
@end
@interface ExchangeWebService_SubscribeResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_ArrayOfDelegateUserResponseMessageType : NSObject
+ (NSArray *)deserializeNode:(xmlNodePtr)cur;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(NSArray *)value;
@end
@interface ExchangeWebService_BaseDelegateResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * ResponseMessages;
@end
@interface ExchangeWebService_GetDelegateResponseMessageType : ExchangeWebService_BaseDelegateResponseMessageType
/* elements */
@property (nonatomic) t_DeliverMeetingRequestsTypeEnum DeliverMeetingRequests;
@end
@interface ExchangeWebService_RemoveDelegateResponseMessageType : ExchangeWebService_BaseDelegateResponseMessageType
@end
@interface ExchangeWebService_ApplyConversationActionResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_CreateAttachmentResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_RefreshSharingFolderResponseMessageType : ExchangeWebService_ResponseMessageType
@end
@interface ExchangeWebService_DeleteAttachmentType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * AttachmentIds;
@end
@interface ExchangeWebService_ResolveNamesResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_ArrayOfResolutionType * ResolutionSet;
@end
@interface ExchangeWebService_EmptyFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_UpdateUserConfigurationType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_UserConfigurationType * UserConfiguration;
@end
@interface ExchangeWebService_GetRoomsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_EmailAddressType * RoomList;
@end
@interface ExchangeWebService_CreateAttachmentType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_ItemIdType * ParentItemId;
@property (nonatomic, strong) NSArray * Attachments;
@end
@interface ExchangeWebService_BaseMoveCopyFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) id ToFolderId;
@property (nonatomic, strong) NSArray * FolderIds;
@end
@interface ExchangeWebService_CopyFolderType : ExchangeWebService_BaseMoveCopyFolderType
@end
@interface ExchangeWebService_ConvertIdResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_AlternateIdBaseType * AlternateId;
@end
@interface ExchangeWebService_CreateItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetMessageTrackingReportResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_MessageTrackingReportType * MessageTrackingReport;
@property (nonatomic, strong) NSArray * Diagnostics;
@property (nonatomic, strong) NSArray * Errors;
@property (nonatomic, strong) NSArray * Properties;
@end
@interface ExchangeWebService_GetRoomListsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * RoomLists;
@end
@interface ExchangeWebService_CreateFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) id ParentFolderId;
@property (nonatomic, strong) NSArray * Folders;
@end
@interface ExchangeWebService_ArrayOfServiceConfigurationType : NSObject
+ (NSArray *)deserializeNode:(xmlNodePtr)cur;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(NSArray *)value;
@end
@interface ExchangeWebService_FindItemType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_ItemResponseShapeType * ItemShape;
@property (nonatomic, strong) t_IndexedPageViewType * IndexedPageItemView;
@property (nonatomic, strong) t_FractionalPageViewType * FractionalPageItemView;
@property (nonatomic, strong) t_CalendarViewType * CalendarView;
@property (nonatomic, strong) t_ContactsViewType * ContactsView;
@property (nonatomic, strong) t_GroupByType * GroupBy;
@property (nonatomic, strong) t_DistinguishedGroupByType * DistinguishedGroupBy;
@property (nonatomic, strong) t_RestrictionType * Restriction;
@property (nonatomic, strong) NSArray * SortOrder;
@property (nonatomic, strong) NSArray * ParentFolderIds;
@property (nonatomic, strong) NSString * QueryString;

/* attributes */
@property (nonatomic) t_ItemQueryTraversalTypeEnum Traversal;
@end
@interface ExchangeWebService_FolderInfoResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * Folders;
@end
@interface ExchangeWebService_GetEventsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_NotificationType * Notification;
@end
@interface ExchangeWebService_FindMailboxStatisticsByKeywordsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * Mailboxes;
@property (nonatomic, strong) NSArray * Keywords;
@property (nonatomic, strong) NSString * Language;
@property (nonatomic, strong) NSArray * Senders;
@property (nonatomic, strong) NSArray * Recipients;
@property (nonatomic, strong) NSDate * FromDate;
@property (nonatomic, strong) NSDate * ToDate;
@property (nonatomic, strong) NSArray * MessageTypes;
@property (nonatomic, strong) NSNumber * SearchDumpster;
@property (nonatomic, strong) NSNumber * IncludePersonalArchive;
@property (nonatomic, strong) NSNumber * IncludeUnsearchableItems;
@end
@interface ExchangeWebService_SyncFolderItemsResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_ExportItemsResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_AddDelegateResponseMessageType : ExchangeWebService_BaseDelegateResponseMessageType
@end
@interface ExchangeWebService_GetSharingMetadataResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * EncryptedSharedFolderDataCollection;
@property (nonatomic, strong) NSArray * InvalidRecipients;
@end
@interface ExchangeWebService_SyncFolderHierarchyResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSString * SyncState;
@property (nonatomic, strong) NSNumber * IncludesLastFolderInRange;
@property (nonatomic, strong) NSArray * Changes;
@end
@interface ExchangeWebService_DeleteAttachmentResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_UpdateUserConfigurationResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_MoveItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_SendNotificationResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_UpdateFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * FolderChanges;
@end
@interface ExchangeWebService_CreateFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_MailTipsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_MailTips * MailTips;
@end
@interface ExchangeWebService_FindConversationType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_IndexedPageViewType * IndexedPageItemView;
@property (nonatomic, strong) NSArray * SortOrder;
@property (nonatomic, strong) id ParentFolderId;
@end
@interface ExchangeWebService_CreateItemType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) id SavedItemFolderId;
@property (nonatomic, strong) NSArray * Items;

/* attributes */
@property (nonatomic) t_MessageDispositionTypeEnum MessageDisposition;
@property (nonatomic) t_CalendarItemCreateOrDeleteOperationTypeEnum SendMeetingInvitations;
@end
@interface ExchangeWebService_AttachmentInfoResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * Attachments;
@end
@interface ExchangeWebService_SequenceElement_MessageXml : NSObject
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_SequenceElement_MessageXml *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

@end
@interface ExchangeWebService_DeleteAttachmentResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_RootItemIdType * RootItemId;
@end
@interface ExchangeWebService_GetItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetAttachmentType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_AttachmentResponseShapeType * AttachmentShape;
@property (nonatomic, strong) NSArray * AttachmentIds;
@end
@interface ExchangeWebService_CreateManagedFolderRequestType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * FolderNames;
@property (nonatomic, strong) t_EmailAddressType * Mailbox;
@end
@interface ExchangeWebService_SetUserOofSettingsResponse : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_SetUserOofSettingsResponse *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic, strong) ExchangeWebService_ResponseMessageType * ResponseMessage;
@end
@interface ExchangeWebService_CreateManagedFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetStreamingEventsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * Notifications;
@property (nonatomic, strong) NSArray * ErrorSubscriptionIds;
@property (nonatomic) t_ConnectionStatusTypeEnum ConnectionStatus;
@end
@interface ExchangeWebService_FindMailboxStatisticsByKeywordsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_MailboxStatisticsSearchResultType * MailboxStatisticsSearchResult;
@end
@interface ExchangeWebService_SendNotificationResultType : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_SendNotificationResultType *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic) t_SubscriptionStatusTypeEnum SubscriptionStatus;
@end
@interface ExchangeWebService_FindItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_SyncFolderItemsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_ItemResponseShapeType * ItemShape;
@property (nonatomic, strong) id SyncFolderId;
@property (nonatomic, strong) NSString * SyncState;
@property (nonatomic, strong) NSArray * Ignore;
@property (nonatomic, strong) NSNumber * MaxChangesReturned;
@property (nonatomic) t_SyncFolderItemsScopeTypeEnum SyncScope;
@end
@interface ExchangeWebService_SyncFolderItemsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSString * SyncState;
@property (nonatomic, strong) NSNumber * IncludesLastItemInRange;
@property (nonatomic, strong) NSArray * Changes;
@end
@interface ExchangeWebService_ResolveNamesType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * ParentFolderIds;
@property (nonatomic, strong) NSString * UnresolvedEntry;

/* attributes */
@property (nonatomic, strong) NSNumber * ReturnFullContactData;
@property (nonatomic) t_ResolveNamesSearchScopeTypeEnum SearchScope;
@property (nonatomic) t_DefaultShapeNamesTypeEnum ContactDataShape;
@end
@interface ExchangeWebService_ArrayOfFreeBusyResponse : NSObject
+ (NSArray *)deserializeNode:(xmlNodePtr)cur;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(NSArray *)value;
@end
@interface ExchangeWebService_GetPhoneCallInformationType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_PhoneCallIdType * PhoneCallId;
@end
@interface ExchangeWebService_GetUserOofSettingsRequest : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_EmailAddress * Mailbox;
@end
@interface ExchangeWebService_PlayOnPhoneType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_ItemIdType * ItemId;
@property (nonatomic, strong) NSString * DialString;
@end
@interface ExchangeWebService_UploadItemsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * Items;
@end
@interface ExchangeWebService_GetPhoneCallInformationResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_PhoneCallInformationType * PhoneCallInformation;
@end
@interface ExchangeWebService_DelegateUserResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_DelegateUserType * DelegateUser;
@end
@interface ExchangeWebService_FindFolderResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_FindFolderParentType * RootFolder;
@end
@interface ExchangeWebService_SubscribeResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSString * SubscriptionId;
@property (nonatomic, strong) NSString * Watermark;
@end
@interface ExchangeWebService_UpdateDelegateType : ExchangeWebService_BaseDelegateType
/* elements */
@property (nonatomic, strong) NSArray * DelegateUsers;
@property (nonatomic) t_DeliverMeetingRequestsTypeEnum DeliverMeetingRequests;
@end
@interface ExchangeWebService_GetPasswordExpirationDateResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSDate * PasswordExpirationDate;
@end
@interface ExchangeWebService_FindMessageTrackingReportRequestType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * Scope;
@property (nonatomic, strong) NSString * Domain;
@property (nonatomic, strong) t_EmailAddressType * Sender;
@property (nonatomic, strong) t_EmailAddressType * PurportedSender;
@property (nonatomic, strong) t_EmailAddressType * Recipient;
@property (nonatomic, strong) NSString * Subject;
@property (nonatomic, strong) NSDate * StartDateTime;
@property (nonatomic, strong) NSDate * EndDateTime;
@property (nonatomic, strong) NSString * MessageId;
@property (nonatomic, strong) t_EmailAddressType * FederatedDeliveryMailbox;
@property (nonatomic, strong) NSString * DiagnosticsLevel;
@property (nonatomic, strong) NSString * ServerHint;
@property (nonatomic, strong) NSArray * Properties;
@end
@interface ExchangeWebService_DeleteFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_CopyFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_DeleteUserConfigurationType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_UserConfigurationNameType * UserConfigurationName;
@end
@interface ExchangeWebService_EmptyFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * FolderIds;

/* attributes */
@property (nonatomic) t_DisposalTypeEnum DeleteType;
@property (nonatomic, strong) NSNumber * DeleteSubFolders;
@end
@interface ExchangeWebService_GetServerTimeZonesResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * TimeZoneDefinitions;
@end
@interface ExchangeWebService_GetServiceConfigurationType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_EmailAddressType * ActingAs;
@property (nonatomic, strong) NSArray * RequestedConfiguration;
@end
@interface ExchangeWebService_MoveFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetEventsResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetUserAvailabilityResponseType : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_GetUserAvailabilityResponseType *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic, strong) NSArray * FreeBusyResponseArray;
@property (nonatomic, strong) ExchangeWebService_SuggestionsResponseType * SuggestionsResponse;
@end
@interface ExchangeWebService_FindFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_CreateUserConfigurationResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_DeleteItemResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_SetUserOofSettingsRequest : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_EmailAddress * Mailbox;
@property (nonatomic, strong) t_UserOofSettings * UserOofSettings;
@end
@interface ExchangeWebService_GetMessageTrackingReportRequestType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * Scope;
@property (nonatomic) t_MessageTrackingReportTemplateTypeEnum ReportTemplate;
@property (nonatomic, strong) t_EmailAddressType * RecipientFilter;
@property (nonatomic, strong) NSString * MessageTrackingReportId;
@property (nonatomic, strong) NSNumber * ReturnQueueEvents;
@property (nonatomic, strong) NSString * DiagnosticsLevel;
@property (nonatomic, strong) NSArray * Properties;
@end
@interface ExchangeWebService_ArrayOfServiceConfigurationResponseMessageType : NSObject
+ (NSArray *)deserializeNode:(xmlNodePtr)cur;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(NSArray *)value;
@end
@interface ExchangeWebService_GetServiceConfigurationResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * ResponseMessages;
@end
@interface ExchangeWebService_BaseMoveCopyItemType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) id ToFolderId;
@property (nonatomic, strong) NSArray * ItemIds;
@property (nonatomic, strong) NSNumber * ReturnNewItemIds;
@end
@interface ExchangeWebService_GetUserOofSettingsResponse : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_GetUserOofSettingsResponse *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic, strong) ExchangeWebService_ResponseMessageType * ResponseMessage;
@property (nonatomic, strong) t_UserOofSettings * OofSettings;
@property (nonatomic) t_ExternalAudienceEnum AllowExternalOof;
@end
@interface ExchangeWebService_CopyItemType : ExchangeWebService_BaseMoveCopyItemType
@end
@interface ExchangeWebService_GetUserAvailabilityRequestType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_SerializableTimeZone * TimeZone;
@property (nonatomic, strong) NSArray * MailboxDataArray;
@property (nonatomic, strong) t_FreeBusyViewOptionsType * FreeBusyViewOptions;
@property (nonatomic, strong) t_SuggestionsViewOptionsType * SuggestionsViewOptions;
@end
@interface ExchangeWebService_MoveItemType : ExchangeWebService_BaseMoveCopyItemType
@end
@interface ExchangeWebService_GetUserConfigurationType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_UserConfigurationNameType * UserConfigurationName;
@property (nonatomic, strong) NSString * UserConfigurationProperties;
@end
@interface ExchangeWebService_MoveFolderType : ExchangeWebService_BaseMoveCopyFolderType
@end
@interface ExchangeWebService_FindMailboxStatisticsByKeywordsResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_UpdateItemType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) id SavedItemFolderId;
@property (nonatomic, strong) NSArray * ItemChanges;

/* attributes */
@property (nonatomic) t_ConflictResolutionTypeEnum ConflictResolution;
@property (nonatomic) t_MessageDispositionTypeEnum MessageDisposition;
@property (nonatomic) t_CalendarItemUpdateOperationTypeEnum SendMeetingInvitationsOrCancellations;
@end
@interface ExchangeWebService_PlayOnPhoneResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_PhoneCallIdType * PhoneCallId;
@end
@interface ExchangeWebService_GetFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_FolderResponseShapeType * FolderShape;
@property (nonatomic, strong) NSArray * FolderIds;
@end
@interface ExchangeWebService_UnsubscribeResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_FreeBusyResponseType : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_FreeBusyResponseType *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic, strong) ExchangeWebService_ResponseMessageType * ResponseMessage;
@property (nonatomic, strong) t_FreeBusyView * FreeBusyView;
@end
@interface ExchangeWebService_RemoveDelegateType : ExchangeWebService_BaseDelegateType
/* elements */
@property (nonatomic, strong) NSArray * UserIds;
@end
@interface ExchangeWebService_FindConversationResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * Conversations;
@end
@interface ExchangeWebService_RefreshSharingFolderType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_FolderIdType * SharingFolderId;
@end
@interface ExchangeWebService_SendNotificationResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_NotificationType * Notification;
@end
@interface ExchangeWebService_SendItemType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * ItemIds;
@property (nonatomic, strong) id SavedItemFolderId;

/* attributes */
@property (nonatomic, strong) NSNumber * SaveItemToFolder;
@end
@interface ExchangeWebService_GetInboxRulesResponseType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSNumber * OutlookRuleBlobExists;
@property (nonatomic, strong) NSArray * InboxRules;
@end
@interface ExchangeWebService_GetStreamingEventsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * SubscriptionIds;
@property (nonatomic, strong) NSNumber * ConnectionTimeout;
@end
@interface ExchangeWebService_UpdateItemResponseMessageType : ExchangeWebService_ItemInfoResponseMessageType
/* elements */
@property (nonatomic, strong) t_ConflictResultsType * ConflictResults;
@end
@interface ExchangeWebService_GetEventsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * SubscriptionId;
@property (nonatomic, strong) NSString * Watermark;
@end
@interface ExchangeWebService_GetAttachmentResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetUserConfigurationResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_UserConfigurationType * UserConfiguration;
@end
@interface ExchangeWebService_GetMailTipsType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_EmailAddressType * SendingAs;
@property (nonatomic, strong) NSArray * Recipients;
@property (nonatomic, strong) NSString * MailTipsRequested;
@end
@interface ExchangeWebService_ExpandDLResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetItemType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_ItemResponseShapeType * ItemShape;
@property (nonatomic, strong) NSArray * ItemIds;
@end
@interface ExchangeWebService_UpdateInboxRulesResponseType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * RuleOperationErrors;
@end
@interface ExchangeWebService_GetServerTimeZonesResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_ConvertIdType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSArray * SourceIds;

/* attributes */
@property (nonatomic) t_IdFormatTypeEnum DestinationFormat;
@end
@interface ExchangeWebService_ExpandDLType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_EmailAddressType * Mailbox;
@end
@interface ExchangeWebService_SyncFolderHierarchyResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_DisconnectPhoneCallType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_PhoneCallIdType * PhoneCallId;
@end
@interface ExchangeWebService_DeleteUserConfigurationResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_UploadItemsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_ItemIdType * ItemId;
@end
@interface ExchangeWebService_SuggestionsResponseType : NSObject
- (void)addElementsToNode:(xmlNodePtr)node;
+ (void)serializeToChildOf:(xmlNodePtr)node withName:(const char *)childName value:(ExchangeWebService_SuggestionsResponseType *)value;
+ (instancetype)deserializeNode:(xmlNodePtr)cur;

/* elements */
@property (nonatomic, strong) ExchangeWebService_ResponseMessageType * ResponseMessage;
@property (nonatomic, strong) NSArray * SuggestionDayResultArray;
@end
@interface ExchangeWebService_GetSharingFolderResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_FolderIdType * SharingFolderId;
@end
@interface ExchangeWebService_ResolveNamesResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_FindMessageTrackingReportResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * Diagnostics;
@property (nonatomic, strong) NSArray * MessageTrackingSearchResults;
@property (nonatomic, strong) NSString * ExecutedSearchScope;
@property (nonatomic, strong) NSArray * Errors;
@property (nonatomic, strong) NSArray * Properties;
@end
@interface ExchangeWebService_GetInboxRulesRequestType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * MailboxSmtpAddress;
@end
@interface ExchangeWebService_CreateUserConfigurationType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_UserConfigurationType * UserConfiguration;
@end
@interface ExchangeWebService_ExpandDLResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) t_ArrayOfDLExpansionType * DLExpansion;

/* attributes */
@property (nonatomic, strong) NSNumber * IndexedPagingOffset;
@property (nonatomic, strong) NSNumber * NumeratorOffset;
@property (nonatomic, strong) NSNumber * AbsoluteDenominator;
@property (nonatomic, strong) NSNumber * IncludesLastItemInRange;
@property (nonatomic, strong) NSNumber * TotalItemsInView;
@end
@interface ExchangeWebService_UpdateDelegateResponseMessageType : ExchangeWebService_BaseDelegateResponseMessageType
@end
@interface ExchangeWebService_GetDelegateType : ExchangeWebService_BaseDelegateType
/* elements */
@property (nonatomic, strong) NSArray * UserIds;

/* attributes */
@property (nonatomic, strong) NSNumber * IncludePermissions;
@end
@interface ExchangeWebService_UpdateInboxRulesRequestType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * MailboxSmtpAddress;
@property (nonatomic, strong) NSNumber * RemoveOutlookRuleBlob;
@property (nonatomic, strong) NSArray * Operations;
@end
@interface ExchangeWebService_GetPasswordExpirationDateType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) NSString * MailboxSmtpAddress;
@end
@interface ExchangeWebService_GetRoomsResponseMessageType : ExchangeWebService_ResponseMessageType
/* elements */
@property (nonatomic, strong) NSArray * Rooms;
@end
@interface ExchangeWebService_UpdateFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_SyncFolderHierarchyType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_FolderResponseShapeType * FolderShape;
@property (nonatomic, strong) id SyncFolderId;
@property (nonatomic, strong) NSString * SyncState;
@end
@interface ExchangeWebService_GetFolderResponseType : ExchangeWebService_BaseResponseMessageType
@end
@interface ExchangeWebService_GetSharingMetadataType : ExchangeWebService_BaseRequestType
/* elements */
@property (nonatomic, strong) t_FolderIdType * IdOfFolderToShare;
@property (nonatomic, strong) NSString * SenderSmtpAddress;
@property (nonatomic, strong) NSArray * Recipients;
@end
@interface ExchangeWebService_UploadItemsResponseType : ExchangeWebService_BaseResponseMessageType
@end
/* Cookies handling provided by http://en.wikibooks.org/wiki/Programming:WebObjects/Web_Services/Web_Service_Provider */

#import <libxml/parser.h>
#import "xsd.h"
#import "ExchangeWebService.h"
#import "t.h"
#import "xml.h"

@class ExchangeWebService_ExchangeServiceBinding;

@interface ExchangeWebService : NSObject

+ (ExchangeWebService_ExchangeServiceBinding *)ExchangeServiceBinding;

@end

@class ExchangeWebService_ExchangeServiceBindingResponse;
@class ExchangeWebService_ExchangeServiceBindingOperation;
@class ExchangeWebService_ExchangeServiceBinding_AddDelegate;
@class ExchangeWebService_ExchangeServiceBinding_ApplyConversationAction;
@class ExchangeWebService_ExchangeServiceBinding_ConvertId;
@class ExchangeWebService_ExchangeServiceBinding_CopyFolder;
@class ExchangeWebService_ExchangeServiceBinding_CopyItem;
@class ExchangeWebService_ExchangeServiceBinding_CreateAttachment;
@class ExchangeWebService_ExchangeServiceBinding_CreateFolder;
@class ExchangeWebService_ExchangeServiceBinding_CreateItem;
@class ExchangeWebService_ExchangeServiceBinding_CreateManagedFolder;
@class ExchangeWebService_ExchangeServiceBinding_CreateUserConfiguration;
@class ExchangeWebService_ExchangeServiceBinding_DeleteAttachment;
@class ExchangeWebService_ExchangeServiceBinding_DeleteFolder;
@class ExchangeWebService_ExchangeServiceBinding_DeleteItem;
@class ExchangeWebService_ExchangeServiceBinding_DeleteUserConfiguration;
@class ExchangeWebService_ExchangeServiceBinding_DisconnectPhoneCall;
@class ExchangeWebService_ExchangeServiceBinding_EmptyFolder;
@class ExchangeWebService_ExchangeServiceBinding_ExpandDL;
@class ExchangeWebService_ExchangeServiceBinding_ExportItems;
@class ExchangeWebService_ExchangeServiceBinding_FindConversation;
@class ExchangeWebService_ExchangeServiceBinding_FindFolder;
@class ExchangeWebService_ExchangeServiceBinding_FindItem;
@class ExchangeWebService_ExchangeServiceBinding_FindMessageTrackingReport;
@class ExchangeWebService_ExchangeServiceBinding_GetAttachment;
@class ExchangeWebService_ExchangeServiceBinding_GetDelegate;
@class ExchangeWebService_ExchangeServiceBinding_GetEvents;
@class ExchangeWebService_ExchangeServiceBinding_GetFolder;
@class ExchangeWebService_ExchangeServiceBinding_GetInboxRules;
@class ExchangeWebService_ExchangeServiceBinding_GetItem;
@class ExchangeWebService_ExchangeServiceBinding_GetMailTips;
@class ExchangeWebService_ExchangeServiceBinding_GetMessageTrackingReport;
@class ExchangeWebService_ExchangeServiceBinding_GetPasswordExpirationDate;
@class ExchangeWebService_ExchangeServiceBinding_GetPhoneCallInformation;
@class ExchangeWebService_ExchangeServiceBinding_GetRoomLists;
@class ExchangeWebService_ExchangeServiceBinding_GetRooms;
@class ExchangeWebService_ExchangeServiceBinding_GetServerTimeZones;
@class ExchangeWebService_ExchangeServiceBinding_GetServiceConfiguration;
@class ExchangeWebService_ExchangeServiceBinding_GetSharingFolder;
@class ExchangeWebService_ExchangeServiceBinding_GetSharingMetadata;
@class ExchangeWebService_ExchangeServiceBinding_GetStreamingEvents;
@class ExchangeWebService_ExchangeServiceBinding_GetUserAvailability;
@class ExchangeWebService_ExchangeServiceBinding_GetUserConfiguration;
@class ExchangeWebService_ExchangeServiceBinding_GetUserOofSettings;
@class ExchangeWebService_ExchangeServiceBinding_MoveFolder;
@class ExchangeWebService_ExchangeServiceBinding_MoveItem;
@class ExchangeWebService_ExchangeServiceBinding_PlayOnPhone;
@class ExchangeWebService_ExchangeServiceBinding_RefreshSharingFolder;
@class ExchangeWebService_ExchangeServiceBinding_RemoveDelegate;
@class ExchangeWebService_ExchangeServiceBinding_ResolveNames;
@class ExchangeWebService_ExchangeServiceBinding_SendItem;
@class ExchangeWebService_ExchangeServiceBinding_SetUserOofSettings;
@class ExchangeWebService_ExchangeServiceBinding_Subscribe;
@class ExchangeWebService_ExchangeServiceBinding_SyncFolderHierarchy;
@class ExchangeWebService_ExchangeServiceBinding_SyncFolderItems;
@class ExchangeWebService_ExchangeServiceBinding_Unsubscribe;
@class ExchangeWebService_ExchangeServiceBinding_UpdateDelegate;
@class ExchangeWebService_ExchangeServiceBinding_UpdateFolder;
@class ExchangeWebService_ExchangeServiceBinding_UpdateInboxRules;
@class ExchangeWebService_ExchangeServiceBinding_UpdateItem;
@class ExchangeWebService_ExchangeServiceBinding_UpdateUserConfiguration;
@class ExchangeWebService_ExchangeServiceBinding_UploadItems;

typedef void (^ExchangeWebService_ExchangeServiceBindingSuccessBlock)(NSArray *headers, NSArray *bodyParts);
typedef void (^ExchangeWebService_ExchangeServiceBindingErrorBlock)(NSError *error);

@interface ExchangeWebService_ExchangeServiceBinding : NSObject
@property (nonatomic, copy) NSURL *address;
@property (nonatomic) BOOL logXMLInOut;
@property (nonatomic) BOOL ignoreEmptyResponse;
@property (nonatomic) NSTimeInterval timeout;
@property (nonatomic, strong) NSMutableArray *cookies;
@property (nonatomic, strong) NSMutableDictionary *customHeaders;
@property (nonatomic, strong) id <SSLCredentialsManaging> sslManager;
@property (nonatomic, strong) SOAPSigner *soapSigner;

@property(nonatomic, strong) t_ElementRequestServerVersion * RequestServerVersionHeader;
@property(nonatomic, strong) t_TimeZoneContextType * TimeZoneContextHeader;
@property(nonatomic) t_DateTimePrecisionTypeEnum DateTimePrecisionHeader;
@property(nonatomic, strong) t_MailboxCultureType * MailboxCultureHeader;
@property(nonatomic, strong) t_ExchangeImpersonationType * ExchangeImpersonationHeader;

+ (NSTimeInterval) defaultTimeout;

- (id)initWithAddress:(NSString *)anAddress;
- (void)sendHTTPCallUsingBody:(NSString *)body soapAction:(NSString *)soapAction forOperation:(ExchangeWebService_ExchangeServiceBindingOperation *)operation;
- (void)addCookie:(NSHTTPCookie *)toAdd;
- (NSString *)MIMEType;

- (ExchangeWebService_ExchangeServiceBindingResponse *)AddDelegate:(ExchangeWebService_AddDelegateType *)aAddDelegate;
- (ExchangeWebService_ExchangeServiceBinding_AddDelegate*)AddDelegate:(ExchangeWebService_AddDelegateType *)aAddDelegate success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)ApplyConversationAction:(ExchangeWebService_ApplyConversationActionType *)aApplyConversationAction;
- (ExchangeWebService_ExchangeServiceBinding_ApplyConversationAction*)ApplyConversationAction:(ExchangeWebService_ApplyConversationActionType *)aApplyConversationAction success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)ConvertId:(ExchangeWebService_ConvertIdType *)aConvertId;
- (ExchangeWebService_ExchangeServiceBinding_ConvertId*)ConvertId:(ExchangeWebService_ConvertIdType *)aConvertId success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)CopyFolder:(ExchangeWebService_CopyFolderType *)aCopyFolder;
- (ExchangeWebService_ExchangeServiceBinding_CopyFolder*)CopyFolder:(ExchangeWebService_CopyFolderType *)aCopyFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)CopyItem:(ExchangeWebService_CopyItemType *)aCopyItem;
- (ExchangeWebService_ExchangeServiceBinding_CopyItem*)CopyItem:(ExchangeWebService_CopyItemType *)aCopyItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)CreateAttachment:(ExchangeWebService_CreateAttachmentType *)aCreateAttachment;
- (ExchangeWebService_ExchangeServiceBinding_CreateAttachment*)CreateAttachment:(ExchangeWebService_CreateAttachmentType *)aCreateAttachment success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)CreateFolder:(ExchangeWebService_CreateFolderType *)aCreateFolder;
- (ExchangeWebService_ExchangeServiceBinding_CreateFolder*)CreateFolder:(ExchangeWebService_CreateFolderType *)aCreateFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)CreateItem:(ExchangeWebService_CreateItemType *)aCreateItem;
- (ExchangeWebService_ExchangeServiceBinding_CreateItem*)CreateItem:(ExchangeWebService_CreateItemType *)aCreateItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)CreateManagedFolder:(ExchangeWebService_CreateManagedFolderRequestType *)aCreateManagedFolder;
- (ExchangeWebService_ExchangeServiceBinding_CreateManagedFolder*)CreateManagedFolder:(ExchangeWebService_CreateManagedFolderRequestType *)aCreateManagedFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)CreateUserConfiguration:(ExchangeWebService_CreateUserConfigurationType *)aCreateUserConfiguration;
- (ExchangeWebService_ExchangeServiceBinding_CreateUserConfiguration*)CreateUserConfiguration:(ExchangeWebService_CreateUserConfigurationType *)aCreateUserConfiguration success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)DeleteAttachment:(ExchangeWebService_DeleteAttachmentType *)aDeleteAttachment;
- (ExchangeWebService_ExchangeServiceBinding_DeleteAttachment*)DeleteAttachment:(ExchangeWebService_DeleteAttachmentType *)aDeleteAttachment success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)DeleteFolder:(ExchangeWebService_DeleteFolderType *)aDeleteFolder;
- (ExchangeWebService_ExchangeServiceBinding_DeleteFolder*)DeleteFolder:(ExchangeWebService_DeleteFolderType *)aDeleteFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)DeleteItem:(ExchangeWebService_DeleteItemType *)aDeleteItem;
- (ExchangeWebService_ExchangeServiceBinding_DeleteItem*)DeleteItem:(ExchangeWebService_DeleteItemType *)aDeleteItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)DeleteUserConfiguration:(ExchangeWebService_DeleteUserConfigurationType *)aDeleteUserConfiguration;
- (ExchangeWebService_ExchangeServiceBinding_DeleteUserConfiguration*)DeleteUserConfiguration:(ExchangeWebService_DeleteUserConfigurationType *)aDeleteUserConfiguration success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)DisconnectPhoneCall:(ExchangeWebService_DisconnectPhoneCallType *)aDisconnectPhoneCall;
- (ExchangeWebService_ExchangeServiceBinding_DisconnectPhoneCall*)DisconnectPhoneCall:(ExchangeWebService_DisconnectPhoneCallType *)aDisconnectPhoneCall success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)EmptyFolder:(ExchangeWebService_EmptyFolderType *)aEmptyFolder;
- (ExchangeWebService_ExchangeServiceBinding_EmptyFolder*)EmptyFolder:(ExchangeWebService_EmptyFolderType *)aEmptyFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)ExpandDL:(ExchangeWebService_ExpandDLType *)aExpandDL;
- (ExchangeWebService_ExchangeServiceBinding_ExpandDL*)ExpandDL:(ExchangeWebService_ExpandDLType *)aExpandDL success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)ExportItems:(ExchangeWebService_ExportItemsType *)aExportItems;
- (ExchangeWebService_ExchangeServiceBinding_ExportItems*)ExportItems:(ExchangeWebService_ExportItemsType *)aExportItems success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)FindConversation:(ExchangeWebService_FindConversationType *)aFindConversation;
- (ExchangeWebService_ExchangeServiceBinding_FindConversation*)FindConversation:(ExchangeWebService_FindConversationType *)aFindConversation success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)FindFolder:(ExchangeWebService_FindFolderType *)aFindFolder;
- (ExchangeWebService_ExchangeServiceBinding_FindFolder*)FindFolder:(ExchangeWebService_FindFolderType *)aFindFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)FindItem:(ExchangeWebService_FindItemType *)aFindItem;
- (ExchangeWebService_ExchangeServiceBinding_FindItem*)FindItem:(ExchangeWebService_FindItemType *)aFindItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)FindMessageTrackingReport:(ExchangeWebService_FindMessageTrackingReportRequestType *)aFindMessageTrackingReport;
- (ExchangeWebService_ExchangeServiceBinding_FindMessageTrackingReport*)FindMessageTrackingReport:(ExchangeWebService_FindMessageTrackingReportRequestType *)aFindMessageTrackingReport success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetAttachment:(ExchangeWebService_GetAttachmentType *)aGetAttachment;
- (ExchangeWebService_ExchangeServiceBinding_GetAttachment*)GetAttachment:(ExchangeWebService_GetAttachmentType *)aGetAttachment success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetDelegate:(ExchangeWebService_GetDelegateType *)aGetDelegate;
- (ExchangeWebService_ExchangeServiceBinding_GetDelegate*)GetDelegate:(ExchangeWebService_GetDelegateType *)aGetDelegate success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetEvents:(ExchangeWebService_GetEventsType *)aGetEvents;
- (ExchangeWebService_ExchangeServiceBinding_GetEvents*)GetEvents:(ExchangeWebService_GetEventsType *)aGetEvents success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetFolder:(ExchangeWebService_GetFolderType *)aGetFolder;
- (ExchangeWebService_ExchangeServiceBinding_GetFolder*)GetFolder:(ExchangeWebService_GetFolderType *)aGetFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetInboxRules:(ExchangeWebService_GetInboxRulesRequestType *)aGetInboxRules;
- (ExchangeWebService_ExchangeServiceBinding_GetInboxRules*)GetInboxRules:(ExchangeWebService_GetInboxRulesRequestType *)aGetInboxRules success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetItem:(ExchangeWebService_GetItemType *)aGetItem;
- (ExchangeWebService_ExchangeServiceBinding_GetItem*)GetItem:(ExchangeWebService_GetItemType *)aGetItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetMailTips:(ExchangeWebService_GetMailTipsType *)aGetMailTips;
- (ExchangeWebService_ExchangeServiceBinding_GetMailTips*)GetMailTips:(ExchangeWebService_GetMailTipsType *)aGetMailTips success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetMessageTrackingReport:(ExchangeWebService_GetMessageTrackingReportRequestType *)aGetMessageTrackingReport;
- (ExchangeWebService_ExchangeServiceBinding_GetMessageTrackingReport*)GetMessageTrackingReport:(ExchangeWebService_GetMessageTrackingReportRequestType *)aGetMessageTrackingReport success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetPasswordExpirationDate:(ExchangeWebService_GetPasswordExpirationDateType *)aGetPasswordExpirationDate;
- (ExchangeWebService_ExchangeServiceBinding_GetPasswordExpirationDate*)GetPasswordExpirationDate:(ExchangeWebService_GetPasswordExpirationDateType *)aGetPasswordExpirationDate success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetPhoneCallInformation:(ExchangeWebService_GetPhoneCallInformationType *)aGetPhoneCallInformation;
- (ExchangeWebService_ExchangeServiceBinding_GetPhoneCallInformation*)GetPhoneCallInformation:(ExchangeWebService_GetPhoneCallInformationType *)aGetPhoneCallInformation success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetRoomLists:(ExchangeWebService_GetRoomListsType *)aGetRoomLists;
- (ExchangeWebService_ExchangeServiceBinding_GetRoomLists*)GetRoomLists:(ExchangeWebService_GetRoomListsType *)aGetRoomLists success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetRooms:(ExchangeWebService_GetRoomsType *)aGetRooms;
- (ExchangeWebService_ExchangeServiceBinding_GetRooms*)GetRooms:(ExchangeWebService_GetRoomsType *)aGetRooms success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetServerTimeZones:(ExchangeWebService_GetServerTimeZonesType *)aGetServerTimeZones;
- (ExchangeWebService_ExchangeServiceBinding_GetServerTimeZones*)GetServerTimeZones:(ExchangeWebService_GetServerTimeZonesType *)aGetServerTimeZones success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetServiceConfiguration:(ExchangeWebService_GetServiceConfigurationType *)aGetServiceConfiguration;
- (ExchangeWebService_ExchangeServiceBinding_GetServiceConfiguration*)GetServiceConfiguration:(ExchangeWebService_GetServiceConfigurationType *)aGetServiceConfiguration success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetSharingFolder:(ExchangeWebService_GetSharingFolderType *)aGetSharingFolder;
- (ExchangeWebService_ExchangeServiceBinding_GetSharingFolder*)GetSharingFolder:(ExchangeWebService_GetSharingFolderType *)aGetSharingFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetSharingMetadata:(ExchangeWebService_GetSharingMetadataType *)aGetSharingMetadata;
- (ExchangeWebService_ExchangeServiceBinding_GetSharingMetadata*)GetSharingMetadata:(ExchangeWebService_GetSharingMetadataType *)aGetSharingMetadata success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetStreamingEvents:(ExchangeWebService_GetStreamingEventsType *)aGetStreamingEvents;
- (ExchangeWebService_ExchangeServiceBinding_GetStreamingEvents*)GetStreamingEvents:(ExchangeWebService_GetStreamingEventsType *)aGetStreamingEvents success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetUserAvailabilityUsingGetUserAvailabilityRequest:(ExchangeWebService_GetUserAvailabilityRequestType *)aGetUserAvailabilityRequest;
- (ExchangeWebService_ExchangeServiceBinding_GetUserAvailability*)GetUserAvailabilityUsingGetUserAvailabilityRequest:(ExchangeWebService_GetUserAvailabilityRequestType *)aGetUserAvailabilityRequest success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetUserConfiguration:(ExchangeWebService_GetUserConfigurationType *)aGetUserConfiguration;
- (ExchangeWebService_ExchangeServiceBinding_GetUserConfiguration*)GetUserConfiguration:(ExchangeWebService_GetUserConfigurationType *)aGetUserConfiguration success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)GetUserOofSettingsUsingGetUserOofSettingsRequest:(ExchangeWebService_GetUserOofSettingsRequest *)aGetUserOofSettingsRequest;
- (ExchangeWebService_ExchangeServiceBinding_GetUserOofSettings*)GetUserOofSettingsUsingGetUserOofSettingsRequest:(ExchangeWebService_GetUserOofSettingsRequest *)aGetUserOofSettingsRequest success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)MoveFolder:(ExchangeWebService_MoveFolderType *)aMoveFolder;
- (ExchangeWebService_ExchangeServiceBinding_MoveFolder*)MoveFolder:(ExchangeWebService_MoveFolderType *)aMoveFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)MoveItem:(ExchangeWebService_MoveItemType *)aMoveItem;
- (ExchangeWebService_ExchangeServiceBinding_MoveItem*)MoveItem:(ExchangeWebService_MoveItemType *)aMoveItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)PlayOnPhone:(ExchangeWebService_PlayOnPhoneType *)aPlayOnPhone;
- (ExchangeWebService_ExchangeServiceBinding_PlayOnPhone*)PlayOnPhone:(ExchangeWebService_PlayOnPhoneType *)aPlayOnPhone success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)RefreshSharingFolder:(ExchangeWebService_RefreshSharingFolderType *)aRefreshSharingFolder;
- (ExchangeWebService_ExchangeServiceBinding_RefreshSharingFolder*)RefreshSharingFolder:(ExchangeWebService_RefreshSharingFolderType *)aRefreshSharingFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)RemoveDelegate:(ExchangeWebService_RemoveDelegateType *)aRemoveDelegate;
- (ExchangeWebService_ExchangeServiceBinding_RemoveDelegate*)RemoveDelegate:(ExchangeWebService_RemoveDelegateType *)aRemoveDelegate success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)ResolveNames:(ExchangeWebService_ResolveNamesType *)aResolveNames;
- (ExchangeWebService_ExchangeServiceBinding_ResolveNames*)ResolveNames:(ExchangeWebService_ResolveNamesType *)aResolveNames success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)SendItem:(ExchangeWebService_SendItemType *)aSendItem;
- (ExchangeWebService_ExchangeServiceBinding_SendItem*)SendItem:(ExchangeWebService_SendItemType *)aSendItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)SetUserOofSettingsUsingSetUserOofSettingsRequest:(ExchangeWebService_SetUserOofSettingsRequest *)aSetUserOofSettingsRequest;
- (ExchangeWebService_ExchangeServiceBinding_SetUserOofSettings*)SetUserOofSettingsUsingSetUserOofSettingsRequest:(ExchangeWebService_SetUserOofSettingsRequest *)aSetUserOofSettingsRequest success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)Subscribe:(ExchangeWebService_SubscribeType *)aSubscribe;
- (ExchangeWebService_ExchangeServiceBinding_Subscribe*)Subscribe:(ExchangeWebService_SubscribeType *)aSubscribe success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)SyncFolderHierarchy:(ExchangeWebService_SyncFolderHierarchyType *)aSyncFolderHierarchy;
- (ExchangeWebService_ExchangeServiceBinding_SyncFolderHierarchy*)SyncFolderHierarchy:(ExchangeWebService_SyncFolderHierarchyType *)aSyncFolderHierarchy success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)SyncFolderItems:(ExchangeWebService_SyncFolderItemsType *)aSyncFolderItems;
- (ExchangeWebService_ExchangeServiceBinding_SyncFolderItems*)SyncFolderItems:(ExchangeWebService_SyncFolderItemsType *)aSyncFolderItems success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)Unsubscribe:(ExchangeWebService_UnsubscribeType *)aUnsubscribe;
- (ExchangeWebService_ExchangeServiceBinding_Unsubscribe*)Unsubscribe:(ExchangeWebService_UnsubscribeType *)aUnsubscribe success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)UpdateDelegate:(ExchangeWebService_UpdateDelegateType *)aUpdateDelegate;
- (ExchangeWebService_ExchangeServiceBinding_UpdateDelegate*)UpdateDelegate:(ExchangeWebService_UpdateDelegateType *)aUpdateDelegate success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)UpdateFolder:(ExchangeWebService_UpdateFolderType *)aUpdateFolder;
- (ExchangeWebService_ExchangeServiceBinding_UpdateFolder*)UpdateFolder:(ExchangeWebService_UpdateFolderType *)aUpdateFolder success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)UpdateInboxRules:(ExchangeWebService_UpdateInboxRulesRequestType *)aUpdateInboxRules;
- (ExchangeWebService_ExchangeServiceBinding_UpdateInboxRules*)UpdateInboxRules:(ExchangeWebService_UpdateInboxRulesRequestType *)aUpdateInboxRules success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)UpdateItem:(ExchangeWebService_UpdateItemType *)aUpdateItem;
- (ExchangeWebService_ExchangeServiceBinding_UpdateItem*)UpdateItem:(ExchangeWebService_UpdateItemType *)aUpdateItem success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)UpdateUserConfiguration:(ExchangeWebService_UpdateUserConfigurationType *)aUpdateUserConfiguration;
- (ExchangeWebService_ExchangeServiceBinding_UpdateUserConfiguration*)UpdateUserConfiguration:(ExchangeWebService_UpdateUserConfigurationType *)aUpdateUserConfiguration success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
- (ExchangeWebService_ExchangeServiceBindingResponse *)UploadItems:(ExchangeWebService_UploadItemsType *)aUploadItems;
- (ExchangeWebService_ExchangeServiceBinding_UploadItems*)UploadItems:(ExchangeWebService_UploadItemsType *)aUploadItems success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;
@end

@interface ExchangeWebService_ExchangeServiceBindingOperation : NSOperation <NSURLConnectionDelegate>
@property(nonatomic, strong) ExchangeWebService_ExchangeServiceBinding *binding;
@property(nonatomic, strong, readonly) ExchangeWebService_ExchangeServiceBindingResponse *response;
@property(nonatomic, strong) NSMutableData *responseData;
@property(nonatomic, strong) NSURLConnection *urlConnection;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error;

/**
 * Cancels connection. Response has error with code kCFURLErrorCancelled in domain kCFErrorDomainCFNetwork.
 */
- (void)cancel;

@end

@interface ExchangeWebService_ExchangeServiceBinding_AddDelegate : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_AddDelegateType * AddDelegate;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	AddDelegate:(ExchangeWebService_AddDelegateType *)aAddDelegate
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_ApplyConversationAction : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_ApplyConversationActionType * ApplyConversationAction;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	ApplyConversationAction:(ExchangeWebService_ApplyConversationActionType *)aApplyConversationAction
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_ConvertId : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_ConvertIdType * ConvertId;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	ConvertId:(ExchangeWebService_ConvertIdType *)aConvertId
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_CopyFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_CopyFolderType * CopyFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	CopyFolder:(ExchangeWebService_CopyFolderType *)aCopyFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_CopyItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_CopyItemType * CopyItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	CopyItem:(ExchangeWebService_CopyItemType *)aCopyItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_CreateAttachment : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_CreateAttachmentType * CreateAttachment;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	CreateAttachment:(ExchangeWebService_CreateAttachmentType *)aCreateAttachment
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_CreateFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_CreateFolderType * CreateFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	CreateFolder:(ExchangeWebService_CreateFolderType *)aCreateFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_CreateItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_CreateItemType * CreateItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	CreateItem:(ExchangeWebService_CreateItemType *)aCreateItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_CreateManagedFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_CreateManagedFolderRequestType * CreateManagedFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	CreateManagedFolder:(ExchangeWebService_CreateManagedFolderRequestType *)aCreateManagedFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_CreateUserConfiguration : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_CreateUserConfigurationType * CreateUserConfiguration;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	CreateUserConfiguration:(ExchangeWebService_CreateUserConfigurationType *)aCreateUserConfiguration
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_DeleteAttachment : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_DeleteAttachmentType * DeleteAttachment;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	DeleteAttachment:(ExchangeWebService_DeleteAttachmentType *)aDeleteAttachment
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_DeleteFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_DeleteFolderType * DeleteFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	DeleteFolder:(ExchangeWebService_DeleteFolderType *)aDeleteFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_DeleteItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_DeleteItemType * DeleteItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	DeleteItem:(ExchangeWebService_DeleteItemType *)aDeleteItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_DeleteUserConfiguration : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_DeleteUserConfigurationType * DeleteUserConfiguration;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	DeleteUserConfiguration:(ExchangeWebService_DeleteUserConfigurationType *)aDeleteUserConfiguration
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_DisconnectPhoneCall : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_DisconnectPhoneCallType * DisconnectPhoneCall;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	DisconnectPhoneCall:(ExchangeWebService_DisconnectPhoneCallType *)aDisconnectPhoneCall
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_EmptyFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_EmptyFolderType * EmptyFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	EmptyFolder:(ExchangeWebService_EmptyFolderType *)aEmptyFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_ExpandDL : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_ExpandDLType * ExpandDL;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	ExpandDL:(ExchangeWebService_ExpandDLType *)aExpandDL
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_ExportItems : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_ExportItemsType * ExportItems;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	ExportItems:(ExchangeWebService_ExportItemsType *)aExportItems
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_FindConversation : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_FindConversationType * FindConversation;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	FindConversation:(ExchangeWebService_FindConversationType *)aFindConversation
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_FindFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_FindFolderType * FindFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	FindFolder:(ExchangeWebService_FindFolderType *)aFindFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_FindItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_FindItemType * FindItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	FindItem:(ExchangeWebService_FindItemType *)aFindItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_FindMessageTrackingReport : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_FindMessageTrackingReportRequestType * FindMessageTrackingReport;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	FindMessageTrackingReport:(ExchangeWebService_FindMessageTrackingReportRequestType *)aFindMessageTrackingReport
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetAttachment : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetAttachmentType * GetAttachment;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetAttachment:(ExchangeWebService_GetAttachmentType *)aGetAttachment
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetDelegate : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetDelegateType * GetDelegate;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetDelegate:(ExchangeWebService_GetDelegateType *)aGetDelegate
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetEvents : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetEventsType * GetEvents;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetEvents:(ExchangeWebService_GetEventsType *)aGetEvents
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetFolderType * GetFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetFolder:(ExchangeWebService_GetFolderType *)aGetFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetInboxRules : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetInboxRulesRequestType * GetInboxRules;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetInboxRules:(ExchangeWebService_GetInboxRulesRequestType *)aGetInboxRules
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetItemType * GetItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetItem:(ExchangeWebService_GetItemType *)aGetItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetMailTips : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetMailTipsType * GetMailTips;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetMailTips:(ExchangeWebService_GetMailTipsType *)aGetMailTips
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetMessageTrackingReport : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetMessageTrackingReportRequestType * GetMessageTrackingReport;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetMessageTrackingReport:(ExchangeWebService_GetMessageTrackingReportRequestType *)aGetMessageTrackingReport
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetPasswordExpirationDate : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetPasswordExpirationDateType * GetPasswordExpirationDate;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetPasswordExpirationDate:(ExchangeWebService_GetPasswordExpirationDateType *)aGetPasswordExpirationDate
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetPhoneCallInformation : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetPhoneCallInformationType * GetPhoneCallInformation;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetPhoneCallInformation:(ExchangeWebService_GetPhoneCallInformationType *)aGetPhoneCallInformation
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetRoomLists : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetRoomListsType * GetRoomLists;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetRoomLists:(ExchangeWebService_GetRoomListsType *)aGetRoomLists
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetRooms : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetRoomsType * GetRooms;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetRooms:(ExchangeWebService_GetRoomsType *)aGetRooms
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetServerTimeZones : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetServerTimeZonesType * GetServerTimeZones;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetServerTimeZones:(ExchangeWebService_GetServerTimeZonesType *)aGetServerTimeZones
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetServiceConfiguration : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetServiceConfigurationType * GetServiceConfiguration;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetServiceConfiguration:(ExchangeWebService_GetServiceConfigurationType *)aGetServiceConfiguration
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetSharingFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetSharingFolderType * GetSharingFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetSharingFolder:(ExchangeWebService_GetSharingFolderType *)aGetSharingFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetSharingMetadata : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetSharingMetadataType * GetSharingMetadata;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetSharingMetadata:(ExchangeWebService_GetSharingMetadataType *)aGetSharingMetadata
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetStreamingEvents : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetStreamingEventsType * GetStreamingEvents;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetStreamingEvents:(ExchangeWebService_GetStreamingEventsType *)aGetStreamingEvents
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetUserAvailability : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetUserAvailabilityRequestType * GetUserAvailabilityRequest;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetUserAvailabilityRequest:(ExchangeWebService_GetUserAvailabilityRequestType *)aGetUserAvailabilityRequest
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetUserConfiguration : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetUserConfigurationType * GetUserConfiguration;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetUserConfiguration:(ExchangeWebService_GetUserConfigurationType *)aGetUserConfiguration
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_GetUserOofSettings : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_GetUserOofSettingsRequest * GetUserOofSettingsRequest;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	GetUserOofSettingsRequest:(ExchangeWebService_GetUserOofSettingsRequest *)aGetUserOofSettingsRequest
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_MoveFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_MoveFolderType * MoveFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	MoveFolder:(ExchangeWebService_MoveFolderType *)aMoveFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_MoveItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_MoveItemType * MoveItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	MoveItem:(ExchangeWebService_MoveItemType *)aMoveItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_PlayOnPhone : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_PlayOnPhoneType * PlayOnPhone;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	PlayOnPhone:(ExchangeWebService_PlayOnPhoneType *)aPlayOnPhone
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_RefreshSharingFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_RefreshSharingFolderType * RefreshSharingFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	RefreshSharingFolder:(ExchangeWebService_RefreshSharingFolderType *)aRefreshSharingFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_RemoveDelegate : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_RemoveDelegateType * RemoveDelegate;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	RemoveDelegate:(ExchangeWebService_RemoveDelegateType *)aRemoveDelegate
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_ResolveNames : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_ResolveNamesType * ResolveNames;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	ResolveNames:(ExchangeWebService_ResolveNamesType *)aResolveNames
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_SendItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_SendItemType * SendItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	SendItem:(ExchangeWebService_SendItemType *)aSendItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_SetUserOofSettings : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_SetUserOofSettingsRequest * SetUserOofSettingsRequest;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	SetUserOofSettingsRequest:(ExchangeWebService_SetUserOofSettingsRequest *)aSetUserOofSettingsRequest
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_Subscribe : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_SubscribeType * Subscribe;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	Subscribe:(ExchangeWebService_SubscribeType *)aSubscribe
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_SyncFolderHierarchy : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_SyncFolderHierarchyType * SyncFolderHierarchy;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	SyncFolderHierarchy:(ExchangeWebService_SyncFolderHierarchyType *)aSyncFolderHierarchy
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_SyncFolderItems : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_SyncFolderItemsType * SyncFolderItems;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	SyncFolderItems:(ExchangeWebService_SyncFolderItemsType *)aSyncFolderItems
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_Unsubscribe : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_UnsubscribeType * Unsubscribe;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	Unsubscribe:(ExchangeWebService_UnsubscribeType *)aUnsubscribe
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_UpdateDelegate : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_UpdateDelegateType * UpdateDelegate;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	UpdateDelegate:(ExchangeWebService_UpdateDelegateType *)aUpdateDelegate
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_UpdateFolder : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_UpdateFolderType * UpdateFolder;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	UpdateFolder:(ExchangeWebService_UpdateFolderType *)aUpdateFolder
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_UpdateInboxRules : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_UpdateInboxRulesRequestType * UpdateInboxRules;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	UpdateInboxRules:(ExchangeWebService_UpdateInboxRulesRequestType *)aUpdateInboxRules
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_UpdateItem : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_UpdateItemType * UpdateItem;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	UpdateItem:(ExchangeWebService_UpdateItemType *)aUpdateItem
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_UpdateUserConfiguration : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_UpdateUserConfigurationType * UpdateUserConfiguration;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	UpdateUserConfiguration:(ExchangeWebService_UpdateUserConfigurationType *)aUpdateUserConfiguration
;
@end
@interface ExchangeWebService_ExchangeServiceBinding_UploadItems : ExchangeWebService_ExchangeServiceBindingOperation
@property(nonatomic, strong) ExchangeWebService_UploadItemsType * UploadItems;

- (id)initWithBinding:(ExchangeWebService_ExchangeServiceBinding *)aBinding success:(ExchangeWebService_ExchangeServiceBindingSuccessBlock)success error:(ExchangeWebService_ExchangeServiceBindingErrorBlock)error
	UploadItems:(ExchangeWebService_UploadItemsType *)aUploadItems
;
@end

@interface ExchangeWebService_ExchangeServiceBinding_envelope : NSObject
+ (NSString *)serializedFormUsingDelegate:(id)delegate;
@end

@interface ExchangeWebService_ExchangeServiceBindingResponse : NSObject
@property(nonatomic, strong) NSArray *headers;
@property(nonatomic, strong) NSArray *bodyParts;
@property(nonatomic, strong) NSError *error;
@end
